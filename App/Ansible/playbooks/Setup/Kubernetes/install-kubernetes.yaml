- name: Update and upgrade apt packages
  hosts: k3s_cluster
  become: true

  tasks:
    - name: Update packages with apt
      when: ansible_pkg_mgr == 'apt'
      ansible.builtin.apt:
        update_cache: true

    - name: Upgrade packages with apt
      when: ansible_pkg_mgr == 'apt'
      ansible.builtin.apt:
        upgrade: dist

- name: Install Kubernetes Server
  hosts: k3s_cluster
  become: true

  tasks:
    - name: Install K3s on k3s-soniiit-server01
      ansible.builtin.shell:
        cmd: curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="server" INSTALL_K3S_CHANNEL=latest sh -s - --disable=servicelb --disable=traefik --disable=local-storage --tls-san={{ kubernetes_vip }} --kube-controller-manager-arg bind-address=0.0.0.0 --kube-proxy-arg metrics-bind-address=0.0.0.0 --kube-scheduler-arg bind-address=0.0.0.0 --etcd-expose-metrics true --kubelet-arg containerd=/run/k3s/containerd/containerd.sock --cluster-init
      when: inventory_hostname == "k3s-soniiit-server01"

    - name: Create K3s Manifest Directory
      ansible.builtin.shell: mkdir -p /var/lib/rancher/k3s/server/manifests
      when: inventory_hostname in groups['server']

    - name: Install KubeVIP RBAC
      ansible.builtin.shell:
        cmd: curl https://kube-vip.io/manifests/rbac.yaml > /var/lib/rancher/k3s/server/manifests/kube-vip-rbac.yaml
      when: inventory_hostname == "k3s-soniiit-server01"

    - name: Install KubeVIP DaemonSet
      ansible.builtin.shell:
        cmd: |
          kubectl apply -f https://kube-vip.io/manifests/rbac.yaml
          export VIP="{{ kubernetes_vip }}"
          export INTERFACE="{{ kubernetes_interface }}"
          KVVERSION=$(curl -sL https://api.github.com/repos/kube-vip/kube-vip/releases | jq -r ".[0].name")
          alias kube-vip="docker run --network host --rm ghcr.io/kube-vip/kube-vip:$KVVERSION"
          kube-vip manifest daemonset --interface $INTERFACE --address $VIP --inCluster --taint --controlplane --services --arp --leaderElection > /var/lib/rancher/k3s/server/manifests/kube-vip.yaml
      when: inventory_hostname == "k3s-soniiit-server01"

    - name: Install KubeVIP Service LoadBalancer
      ansible.builtin.shell:
        cmd: |
          kubectl apply -f https://raw.githubusercontent.com/kube-vip/kube-vip-cloud-provider/main/manifest/kube-vip-cloud-controller.yaml
          kubectl create configmap -n kube-system kubevip --from-literal range-global="{{ kubernetes_range_global }}"
      when: inventory_hostname == "k3s-soniiit-server01"

    - name: Retrieve K3s node token
      ansible.builtin.shell: cat /var/lib/rancher/k3s/server/node-token
      register: k3s_token
      when: inventory_hostname == "k3s-soniiit-server01"

    - name: Install K3s on K3s other Server
      ansible.builtin.shell:
        cmd: curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="server" INSTALL_K3S_CHANNEL=latest sh -s - --server=https://{{ hostvars['k3s-soniiit-server01']['ansible_host'] }}:6443 --token={{ hostvars['k3s-soniiit-server01']['k3s_token'].stdout }} --disable=servicelb --disable=traefik --disable=local-storage --docker
      when: inventory_hostname != "k3s-soniiit-server01" and inventory_hostname in groups['server']

    - name: Install K3s on Agents
      ansible.builtin.shell:
        cmd: curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="agent" INSTALL_K3S_CHANNEL=latest sh -s - --server=https://{{ kubernetes_vip }}:6443 --token={{ hostvars['k3s-soniiit-server01']['k3s_token'].stdout }} --docker
      when: inventory_hostname in groups['agent']

    - name: Copy Kubeconfig to home directory
      ansible.builtin.copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: /home/{{ hostvars['k3s-soniiit-server01']['ansible_user'] }}/config
        remote_src: true
      when: inventory_hostname == "k3s-soniiit-server01"
